---
layout:     post
title:      "Java 软件工程技术 面试 个人指南 (三) - 常见算法篇"
subtitle:   "\"一切都是为了做个不后悔的自己\""
date:       2018-03-16 12:00:00
author:     "Gordon"
header-img: "img/in-post/2018-03-16-interview-algorithm/interview-algorithm-bg-2.jpg"
catalog: true
tags:
    - Java
    - Interview
    - Algorithm
---
## 数组

## 链表
![](/img/in-post/2018-03-16-interview-algorithm/list-1.gif)

1. 判断单链表中是否有环找到环的入口节点
  * 使用追赶的方法，设定两个指针slow、fast，从头指针开始，每次分别前进1步、2步。如存在环，则两者相遇；如不存在环，fast遇到NULL退出
  
2. 如何知道环的长度
  * 记录下问题1的碰撞点p，slow、fast从该点开始，再次碰撞所走过的操作数就是环的长度s
  
3. 如何找出环的连接点在哪里？
  * **碰撞点p到连接点的距离=头指针到连接点的距离，因此，分别从碰撞点、头指针开始走，相遇的那个点就是连接点。**
  * 假设slow行进了x并在A点进入环路时，fast在环中已经行进了n圈来到B点(n>=0)，其行进距离为2x，则可得到如下等式：2x = x +ns+s-y，做一下运算，即x=(n+1)s-y 
  * 若此时再设置一个指向头节点的指针p，而slow在M处，当p行进了x来到A点时，M行进了x=(n+1)s-y，恰好也来到A处，此时，2个指针相遇了。走的步数即为x长度可知

4. 带环链表的长度是多少？
  * 问题3中已经求出连接点距离头指针的长度，加上问题2中求出的环的长度，二者之和就是带环单链表的长度


## 排序
1. 快排过程，复杂度，适用条件
  *  

## 字符串
## 栈
## 树
## 分治
## 回溯
## 哈希
## 复杂度
## 动态规划
## 贪心算法